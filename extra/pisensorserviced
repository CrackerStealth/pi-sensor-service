#!/bin/sh

### BEGIN INIT INFO
# Provides:        pisensorserviced
# Required-Start:  $network $remote_fs $syslog
# Required-Stop:   $network $remote_fs $syslog
# Default-Start:   2 3 4 5
# Default-Stop:
# Short-Description: Start the Pi Sensor Service
### END INIT INFO
. /lib/lsb/init-functions

PI_SENSOR_SERVICE_PATH=/opt/pi-sensor-service
LOCKFILE=/var/lock/pi_sensor_service

# Start the service
start() {
        if [ ! -f $LOCKFILE ]; then
            log_daemon_msg "Starting Pi Sensor Service" "pisensorserviced"
            (cd $PI_SENSOR_SERVICE_PATH; python $PI_SENSOR_SERVICE_PATH/service.py)&
            touch $LOCKFILE
        else
            log_daemon_msg "Pi Sensor Service already running." "pisensorserviced"
        fi
        echo
}
# Stop the service
stop() {
        log_daemon_msg "Stopping Pi Sensor Service" "pisensorserviced"
        PI_SENSOR_SERVICE_PID=`ps aux | grep "python $PI_SENSOR_SERVICE_PATH/service.py" | grep -v "grep" | awk '{ print $2 }'`
        if [ ! -z "$PI_SENSOR_SERVICE_PID" ]; then
            kill $PI_SENSOR_SERVICE_PID
        fi
        rm -f $LOCKFILE
        echo
}
# Status of the service
status () {
        PI_SENSOR_SERVICE_PID=`ps aux | grep "python $PI_SENSOR_SERVICE_PATH/service.py" | grep -v "grep" | awk '{ print $2 }'`
        if [ ! -z "$PI_SENSOR_SERVICE_PID" ]; then
            echo "Pi Sensor Service Status: Running"
        else
            echo "Pi Sensor Service Status: Stopped"
        fi
}
### main logic ###
case "$1" in
  start)
        start
        ;;
  stop)
        stop
        ;;
  status)
        status
        ;;
  restart|reload|condrestart)
        stop
        sleep 2
        start
        ;;
  *)
        echo $"Usage: $0 {start|stop|restart|reload|status}"
        exit 1
esac
exit 0
